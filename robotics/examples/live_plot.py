#!/usr/bin/env python3
"""
A minimal example of a live plot in a background process.
"""
import multiprocessing as mp
import random
import time

import matplotlib.pyplot as plt


def simulation(q):
    """A simulation generating points to plot."""
    for _ in range(100):
        y = random.randint(-20, 20)
        # If the queue is full, block until it's not full.
        q.put(y, block=True)
        time.sleep(0.1)
    # Use None as a sentinel value to indicate we're done.
    q.put(None)
    print('exiting simulation process')


def live_plot(q):
    """A blocking live plot to plot the data generated by the simulation."""
    plt.figure()
    plt.ion()

    ys = []

    plot, = plt.plot(ys, '.')

    while True:
        y = q.get(block=True)

        if y is None:
            break

        ys.append(y)
        plot.set_data(range(len(ys)), ys)
        # Rescaling to show new points is important!
        plot.axes.set_xlim(0 - 0.1, len(ys) + 0.1)
        plot.axes.set_ylim(min(ys) - 0.1, max(ys) + 0.1)

        try:
            plt.pause(0.01)
        except:
            # Window closed, can't update
            break

    # Prevent plot window from closing
    plt.show(block=True)
    print('exiting live plotting process')


def main():
    """The main entry point for the producer-consumer simulation"""
    q = mp.Queue()

    producer = mp.Process(target=simulation, args=(q, ))
    consumer = mp.Process(target=live_plot, args=(q, ))

    consumer.start()
    producer.start()


if __name__ == '__main__':
    main()
